# vim: ft=sh 

###
# ENV Overrides:
#
# SYSLOG: true/false ; Default true
#
# HOST_SYSLOG_DAEMON: IP_ADDRESS/HOSTNAME ; Defaults to syslog --link alias or gateway IP
#
# FACILITY: kern|user|mail|daemon|auth|syslog|lpr|news|uucp|authpriv|ftp|cron|local{0-7} ; Default user
#
# TEE_OUTPUT: true/false ; Defaults to false
#
###

_enable_syslog=${SYSLOG:-true}

if host syslog > /dev/null 2>&1; then
  ____links_syslog_host=$(host syslog | head -n 1 | cut -f 4)
  _host_syslog_daemon="${HOST_SYSLOG_DAEMON:-$____links_syslog_host}"
else
  ____gateway_ip=$(ip route | grep default | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
  _host_syslog_daemon="${HOST_SYSLOG_DAEMON:-$____gateway_ip}"
fi
echo "Syslog Daemon Detected: ${_host_syslog_daemon}"

_facility="${FACILITY:-user}"

_syslog_and_stdout_stderr=${TEE_OUTPUT:-false} 

export HOST_SYSLOG_DAEMON="${_host_syslog_daemon}"
export SYSLOG="${_enable_syslog}"
export TEE_OUTPUT="${_syslog_and_stdout_stderr}"

case $(uname -s) in
  Darwin)
    if which gstdbuf > /dev/null 2>&1; then
      stdbuf_bin="gstdbuf"
    else
      echo "gstdbuf not found, install coreutils"
      exit 2
    fi
    if which gsed > /dev/null 2>&1; then
      sed_bin="gsed"
    else
      echo "gsed not found, install gnu-sed"
      exit 2
    fi
    ;;
  Linux)
    if which stdbuf > /dev/null 2>&1; then
      stdbuf_bin="stdbuf"
    else
      echo "stdbuf not found!"
      exit 2
    fi
    if which sed > /dev/null 2>&1; then
      sed_bin="sed"
    else
      echo "sed not found!"
      exit 2
    fi
    ;;
  *)
    echo "$OPTARG not supported"
    exit 2
    ;;
esac


##if which stdbuf > /dev/null 2>&1; then
##  stdbuf_bin="stdbuf"
##elif which gstdbuf > /dev/null 2>&1; then
##  stdbuf_bin="gstdbuf"
##else
##  echo "Could not find stdbuf" 1>&2
##  exit 2
##fi
##
##if which gsed > /dev/null 2>&1; 

__syslog_logger() {
  local LEVEL=${1:-info}
  $stdbuf_bin -oL -i0 -eL $sed_bin -u -r -e 's/\\n/ /g' -e 's/\s\-{3,}/;/g' -e 's/\-{3,}\s//g' |\
    /usr/bin/logger -p ${_facility}.${LEVEL} -t "$(hostname) ${APP_NAME}[$$]" -n "${_host_syslog_daemon}" -u /tmp/ignored
}

__console_logger() {
  DT="$(date +%Y-%m-%dT%T%:z)"
  $stdbuf_bin -oL -i0 -eL $sed_bin -u 's|\(.*\)|'"${DT}"' \1|g' 1>&3
}

run_logger() {
  if $_enable_syslog; then
    if $_syslog_and_stdout_stderr; then
      $stdbuf_bin -oL -i0 -eL tee -a >(__syslog_logger $1) >(__console_logger) > /dev/null 2>&1
    else
      __syslog_logger $1
    fi
  else
    __console_logger
  fi
}

# Prevent redirection loop
exec 3>&1
# Catch all STDOUT and STDERR traffic
exec 1> >($stdbuf_bin -oL -i0 -eL $sed_bin -u 's|\(.*\)|STDOUT: \1|g' | run_logger info)
exec 2> >($stdbuf_bin -oL -i0 -eL $sed_bin -u 's|\(.*\)|STDERR: \1|g' | run_logger err)

log()      { echo "INFO: $*"      | run_logger info   ; }
error()    { echo "ERROR: $*"     | run_logger err    ; }
critical() { echo "EMERGENCY: $*" | run_logger emerg  ; }
alert()    { echo "ALERT: $*"     | run_logger alert  ; }
notice()   { echo "NOTICE: $*"    | run_logger notice ; }
debug()    { echo "DEBUG: $*"     | run_logger debug  ; }
warning()  { echo "WARN: $*"      | run_logger warn   ; }

log_stdin()      { while read line; do echo "INFO: $line"      | run_logger info;   done; }
error_stdin()    { while read line; do echo "ERROR: $line"     | run_logger err;    done; }
critical_stdin() { while read line; do echo "EMERGENCY: $line" | run_logger emerg;  done; }
alert_stdin()    { while read line; do echo "ALERT: $line"     | run_logger alert;  done; }
notice_stdin()   { while read line; do echo "NOTICE: $line"    | run_logger notice; done; }
debug_stdin()    { while read line; do echo "DEBUG: $line"     | run_logger debug;  done; }
warning_stdin()  { while read line; do echo "WARN: $line"      | run_logger warn;   done; }

info()       { log "$*"      ; }
warn()       { warning "$*"  ; }
info_stdin() { log_stdin     ; }
warn_stdin() { warning_stdin ; }

# $1 = file
# $2 = variant (webapp); unset creates default
generate_logback_config() {
  check_data $1
  local _variant=${2}
  if ! ${SYSLOG}               ; then _logback_root='<appender-ref ref="STDOUT" />'; fi
  if ${SYSLOG}                 ; then _logback_root='<appender-ref ref="SYSLOG" />'; fi
  if ${SYSLOG} && ${TEE_OUTPUT}; then _logback_root='<appender-ref ref="STDOUT" /><appender-ref ref="SYSLOG" />'; fi
  local _suffix_pattern_addon=
  case "${_variant}" in
    webapp)
      _suffix_pattern_addon=' APP:${CONTEXT_NAME} USER:%X{eds.userid}/%X{eds.emailaddress} RHOST:%X{req.xForwardedFor}/%X{req.remoteHost} URL:%X{req.requestURL}?%X{req.queryString} M:%X{req.method}' 
      ;;
    standard)
      ;;
    *)
      ;;
  esac
  cat <<EOF > "${1}" || true
<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender> 
  <appender name="SYSLOG" class="ch.qos.logback.classic.net.SyslogAppender">
    <syslogHost>${_host_syslog_daemon}</syslogHost>
    <facility>${_facility}</facility>
    <suffixPattern>${APP_NAME:-unknown}[$$]:${_suffix_pattern_addon} %t/%c{1}: %replace(%msg %rEx{short}){"[\\n\\t]"," "}%nopex</suffixPattern>
    <stackTracePattern>${APP_NAME:-unknown}[$$]: </stackTracePattern>
    <throwableExcluded>false</throwableExcluded>
  </appender>
  <logger name="com.edatasource.analyst.auth.AuthTokenUtil" level="warn"></logger>
  <root level="${LOG_LEVEL:-INFO}">
    ${_logback_root}
  </root>
</configuration>
EOF
}
